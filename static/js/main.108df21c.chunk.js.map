{"version":3,"sources":["assets/pinterest.svg","assets/like.svg","container-Print/PrintMenu.jsx","container-Print/ModalPrint.jsx","controllerAPI/MoreImages.js","controllerAPI/SearchData.js","components/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","PrintMenu","handleQuery","Search","data-testid","className","src","pinterest","alt","type","onSubmit","event","preventDefault","onChange","placeholder","ModalPrint","img","description","profileUser","name","likes","download","useState","show","setShow","handleClose","variant","onClick","Modal","onHide","Header","closeButton","Title","href","Body","like","Footer","Button","MoreImages","page","query","fetch","method","headers","then","response","json","SearchData","Home","result","setResult","setQuery","setPage","useEffect","jsonResponse","console","log","results","catch","error","message","target","value","dataLength","length","hasMore","next","setTimeout","concat","loader","map","element","urls","thumb","user","profile_image","small","total_likes","alt_description","links","key","id","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.108df21c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pinterest.e73e4fbd.svg\";","module.exports = __webpack_public_path__ + \"static/media/like.71152490.svg\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport pinterest from '../assets/pinterest.svg';\n\nconst PrintMenu = ({\n  handleQuery, Search,\n}) => (\n  <section data-testid=\"menu\">\n    <header className=\"header\">\n      <li className=\"logo-pinterest\">\n        <img src={pinterest} alt=\"logo\" className=\"logo\" />\n\n      </li>\n      <button\n        className=\"start btn btn-outline-dark\"\n        type=\"button\"\n        // onClick={(event) => {\n        //   event.preventDefault();\n        //   handleQuery('');\n        // }}\n      >\n        Inicio\n      </button>\n      <div className=\"searchImages\">\n        <form\n          data-testid=\"formSearch\"\n          onSubmit={(event) => {\n            event.preventDefault();\n            Search();\n          }}\n        >\n          <input\n            className=\"inputSearch\"\n            onChange={handleQuery}\n            type=\"text\"\n            placeholder=\"Search images\"\n          />\n        </form>\n      </div>\n    </header>\n  </section>\n);\nPrintMenu.propTypes = {\n  handleQuery: PropTypes.func.isRequired,\n  Search: PropTypes.func.isRequired,\n};\n\nexport default PrintMenu;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Modal, Button } from 'react-bootstrap';\nimport like from '../assets/like.svg';\n\n\nfunction ModalPrint({\n  img, description, profileUser, name, likes, download,\n}) {\n  const [show, setShow] = useState(false);\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n  return (\n    <section>\n      <input\n        data-testid=\"input\"\n        type=\"image\"\n        variant=\"primary\"\n        onClick={handleShow}\n        src={img}\n        className=\"itemImage\"\n        alt=\"photos\"\n      />\n      <div data-testid=\"modal\">\n\n        <Modal show={show} onHide={handleClose}>\n          <Modal.Header closeButton>\n            <Modal.Title className=\"description\">\n              {description}\n            </Modal.Title>\n            {/* <a className=\"buttonSave\">Save</a> */}\n            <a className=\"btn btn-danger buttonSave\" href={download}>\n              Save\n            </a>\n\n          </Modal.Header>\n          <Modal.Body>\n            <img src={img} alt=\"photos\" className=\"itemImageModal\" />\n            <img src={profileUser} alt=\"photos\" className=\"profileUser\" />\n            <p className=\"NameUser\">\n              {name}\n            </p>\n            <p className=\"Textlikes\">\n              <img src={like} alt=\"total-likes\" className=\"likes\" />\n              Likes:\n              {' '}\n\n              { likes }\n\n            </p>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"secondary\" onClick={handleClose} className=\"closeButton\">\n              Close\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </div>\n    </section>\n  );\n}\nModalPrint.propTypes = {\n  img: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  profileUser: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  likes: PropTypes.number.isRequired,\n  download: PropTypes.string.isRequired,\n};\nexport default ModalPrint;\n","const clientId = 'kwcGvKin0pLHWk6_pLuUKQpqiQMXN26K5hFoURVGHZM';\nconst endPoint = 'https://api.unsplash.com/search/photos';\n\n\nconst MoreImages = (page, query) => fetch(`${endPoint}?per_page=20&page=${page}&query=${query}&client_id=${clientId}`, {\n  method: 'GET',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n}).then((response) => response.json());\nexport default MoreImages;\n","const clientId = 'kwcGvKin0pLHWk6_pLuUKQpqiQMXN26K5hFoURVGHZM';\nconst endPoint = 'https://api.unsplash.com/search/photos';\n\nconst SearchData = (query) => fetch(`${endPoint}?per_page=20&query=${query}&client_id=${clientId}`, {\n  method: 'GET',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n}).then((response) => response.json());\nexport default SearchData;\n","import React, { useState, useEffect } from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport PrintMenu from '../container-Print/PrintMenu';\nimport ModalPrint from '../container-Print/ModalPrint';\n\nimport '../css/styles.css';\n// import GetData from '../controllerAPI/GetData';\nimport MoreImages from '../controllerAPI/MoreImages';\nimport SearchData from '../controllerAPI/SearchData';\n\nconst clientId = 'kwcGvKin0pLHWk6_pLuUKQpqiQMXN26K5hFoURVGHZM ';\nconst endPoint = 'https://api.unsplash.com/search/photos';\n\nfunction Home() {\n  const [result, setResult] = useState([]);\n  const [query, setQuery] = useState('Pink');\n  const [page, setPage] = useState(2);\n\n  const handleQuery = (event) => {\n    setQuery(event.target.value);\n  };\n  useEffect(() => {\n    fetch(`${endPoint}?&per_page=20&page=1&query=${query}&client_id=${clientId}`)\n      .then((response) => response.json()).then((jsonResponse) => {\n        console.log(jsonResponse);\n        setResult(jsonResponse.results);\n      });\n  }, []);\n\n  const searchImages = () => {\n    SearchData(query).then((jsonResponse) => (setResult(jsonResponse.results)))\n      .catch((error) => console.log(`Error al realizar la peticiÃ³n:${error.message}`));\n  };\n  const moreImages = () => {\n    setTimeout(() => {\n      setPage(page + 1);\n      MoreImages(page, query).then((jsonResponse) => (setResult(result.concat(jsonResponse.results))))\n        .catch((error) => console.log(`Error al realizar la peticiÃ³n:${error.message}`));\n    }, 1000);\n  };\n  const PrintData = () => result.map((element) => (\n    <ModalPrint\n      img={element.urls.thumb}\n      profileUser={element.user.profile_image.small}\n      name={element.user.name}\n      likes={element.user.total_likes}\n      description={element.alt_description}\n      download={element.links.download}\n      key={element.id}\n    />\n  ));\n  return (\n    <div className=\"masonry\">\n      <PrintMenu Search={searchImages} handleQuery={handleQuery} query={query} />\n      <div className=\"containerImages\">\n        <InfiniteScroll\n          dataLength={result.length}\n          hasMore\n          next={moreImages}\n          loader={(\n            <div className=\"loading\">\n              <div className=\"loading-text\">\n                <span className=\"loading-text-words\">L</span>\n                <span className=\"loading-text-words\">O</span>\n                <span className=\"loading-text-words\">A</span>\n                <span className=\"loading-text-words\">D</span>\n                <span className=\"loading-text-words\">I</span>\n                <span className=\"loading-text-words\">N</span>\n                <span className=\"loading-text-words\">G</span>\n              </div>\n            </div>\n)}\n\n        >\n          {PrintData()}\n        </InfiniteScroll>\n\n      </div>\n    </div>\n  );\n}\n\nexport default Home;\n","import React from 'react';\nimport Home from './components/Home';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Home />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}